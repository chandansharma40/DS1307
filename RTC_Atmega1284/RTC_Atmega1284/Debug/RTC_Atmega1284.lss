
RTC_Atmega1284.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  00000510  00000584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000510  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000668  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001460  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a0a  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008f5  00000000  00000000  000025d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00002ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000054d  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000046d  00000000  00000000  0000357d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000039ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4f c0       	rjmp	.+158    	; 0xa0 <__ctors_end>
   2:	00 00       	nop
   4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
   6:	00 00       	nop
   8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
   a:	00 00       	nop
   c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
   e:	00 00       	nop
  10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
  12:	00 00       	nop
  14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
  16:	00 00       	nop
  18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
  1a:	00 00       	nop
  1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
  1e:	00 00       	nop
  20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
  22:	00 00       	nop
  24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
  26:	00 00       	nop
  28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
  2e:	00 00       	nop
  30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
  32:	00 00       	nop
  34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
  36:	00 00       	nop
  38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
  3a:	00 00       	nop
  3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
  3e:	00 00       	nop
  40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
  42:	00 00       	nop
  44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
  46:	00 00       	nop
  48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
  4e:	00 00       	nop
  50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
  52:	00 00       	nop
  54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
  56:	00 00       	nop
  58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
  5a:	00 00       	nop
  5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
  5e:	00 00       	nop
  60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
  62:	00 00       	nop
  64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
  66:	00 00       	nop
  68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
  6e:	00 00       	nop
  70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
  72:	00 00       	nop
  74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
  76:	00 00       	nop
  78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
  7a:	00 00       	nop
  7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
  7e:	00 00       	nop
  80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
  82:	00 00       	nop
  84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
  86:	00 00       	nop
  88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
  8a:	00 00       	nop
  8c:	72 01       	movw	r14, r4
  8e:	5e 01       	movw	r10, r28
  90:	60 01       	movw	r12, r0
  92:	62 01       	movw	r12, r4
  94:	64 01       	movw	r12, r8
  96:	66 01       	movw	r12, r12
  98:	68 01       	movw	r12, r16
  9a:	6a 01       	movw	r12, r20
  9c:	6c 01       	movw	r12, r24
  9e:	6e 01       	movw	r12, r28

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	d0 e4       	ldi	r29, 0x40	; 64
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
  ac:	11 e0       	ldi	r17, 0x01	; 1
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b1 e0       	ldi	r27, 0x01	; 1
  b2:	e0 e1       	ldi	r30, 0x10	; 16
  b4:	f5 e0       	ldi	r31, 0x05	; 5
  b6:	00 e0       	ldi	r16, 0x00	; 0
  b8:	0b bf       	out	0x3b, r16	; 59
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x14>
  bc:	07 90       	elpm	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	a2 3b       	cpi	r26, 0xB2	; 178
  c2:	b1 07       	cpc	r27, r17
  c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0x10>
  c6:	87 d1       	rcall	.+782    	; 0x3d6 <main>
  c8:	21 c2       	rjmp	.+1090   	; 0x50c <_exit>

000000ca <__bad_interrupt>:
  ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <i2c_init>:
	else
	{
		return FALSE;
	}
	
}
  cc:	88 e0       	ldi	r24, 0x08	; 8
  ce:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  d2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  d6:	ec eb       	ldi	r30, 0xBC	; 188
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	80 83       	st	Z, r24
  e0:	08 95       	ret

000000e2 <i2c_start>:
  e2:	84 ea       	ldi	r24, 0xA4	; 164
  e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  e8:	ec eb       	ldi	r30, 0xBC	; 188
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	88 23       	and	r24, r24
  f0:	ec f7       	brge	.-6      	; 0xec <i2c_start+0xa>
  f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  f6:	88 7f       	andi	r24, 0xF8	; 248
  f8:	88 30       	cpi	r24, 0x08	; 8
  fa:	41 f0       	breq	.+16     	; 0x10c <i2c_start+0x2a>
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	ee d1       	rcall	.+988    	; 0x4de <UART_1_puts>
 102:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 106:	e3 d1       	rcall	.+966    	; 0x4ce <UART_1_putc>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	08 95       	ret

00000110 <i2c_rep_start>:
 110:	84 ea       	ldi	r24, 0xA4	; 164
 112:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 116:	ec eb       	ldi	r30, 0xBC	; 188
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	88 23       	and	r24, r24
 11e:	ec f7       	brge	.-6      	; 0x11a <i2c_rep_start+0xa>
 120:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 124:	88 7f       	andi	r24, 0xF8	; 248
 126:	80 31       	cpi	r24, 0x10	; 16
 128:	41 f0       	breq	.+16     	; 0x13a <i2c_rep_start+0x2a>
 12a:	88 e0       	ldi	r24, 0x08	; 8
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	d7 d1       	rcall	.+942    	; 0x4de <UART_1_puts>
 130:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 134:	cc d1       	rcall	.+920    	; 0x4ce <UART_1_putc>
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	08 95       	ret
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	08 95       	ret

0000013e <i2c_stop>:
 13e:	84 e9       	ldi	r24, 0x94	; 148
 140:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 144:	ec eb       	ldi	r30, 0xBC	; 188
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	84 fd       	sbrc	r24, 4
 14c:	fd cf       	rjmp	.-6      	; 0x148 <i2c_stop+0xa>
 14e:	08 95       	ret

00000150 <i2c_slave_add_write>:
 150:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 154:	84 e8       	ldi	r24, 0x84	; 132
 156:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 15a:	ec eb       	ldi	r30, 0xBC	; 188
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	88 23       	and	r24, r24
 162:	ec f7       	brge	.-6      	; 0x15e <i2c_slave_add_write+0xe>
 164:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 168:	88 7f       	andi	r24, 0xF8	; 248
 16a:	88 31       	cpi	r24, 0x18	; 24
 16c:	41 f0       	breq	.+16     	; 0x17e <i2c_slave_add_write+0x2e>
 16e:	82 e1       	ldi	r24, 0x12	; 18
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	b5 d1       	rcall	.+874    	; 0x4de <UART_1_puts>
 174:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 178:	aa d1       	rcall	.+852    	; 0x4ce <UART_1_putc>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 95       	ret
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	08 95       	ret

00000182 <i2c_data_byte_write>:
 182:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 186:	84 e8       	ldi	r24, 0x84	; 132
 188:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 18c:	ec eb       	ldi	r30, 0xBC	; 188
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	88 23       	and	r24, r24
 194:	ec f7       	brge	.-6      	; 0x190 <i2c_data_byte_write+0xe>
 196:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 19a:	88 7f       	andi	r24, 0xF8	; 248
 19c:	88 32       	cpi	r24, 0x28	; 40
 19e:	41 f0       	breq	.+16     	; 0x1b0 <i2c_data_byte_write+0x2e>
 1a0:	8a e1       	ldi	r24, 0x1A	; 26
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	9c d1       	rcall	.+824    	; 0x4de <UART_1_puts>
 1a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1aa:	91 d1       	rcall	.+802    	; 0x4ce <UART_1_putc>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	08 95       	ret
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	08 95       	ret

000001b4 <i2c_write_add_read>:
 1b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1b8:	84 e8       	ldi	r24, 0x84	; 132
 1ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1be:	ec eb       	ldi	r30, 0xBC	; 188
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	88 23       	and	r24, r24
 1c6:	ec f7       	brge	.-6      	; 0x1c2 <i2c_write_add_read+0xe>
 1c8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1cc:	88 7f       	andi	r24, 0xF8	; 248
 1ce:	80 34       	cpi	r24, 0x40	; 64
 1d0:	41 f0       	breq	.+16     	; 0x1e2 <i2c_write_add_read+0x2e>
 1d2:	82 e2       	ldi	r24, 0x22	; 34
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	83 d1       	rcall	.+774    	; 0x4de <UART_1_puts>
 1d8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1dc:	78 d1       	rcall	.+752    	; 0x4ce <UART_1_putc>
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	08 95       	ret
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	08 95       	ret

000001e6 <i2c_read_data_ACK>:

uint8_t i2c_read_data_ACK()
{
	
	TWCR|=(1<<TWEA);
 1e6:	ec eb       	ldi	r30, 0xBC	; 188
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	80 64       	ori	r24, 0x40	; 64
 1ee:	80 83       	st	Z, r24
	TWCR|=(1<<TWINT)|(1<<TWEN);
 1f0:	80 81       	ld	r24, Z
 1f2:	84 68       	ori	r24, 0x84	; 132
 1f4:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 1f6:	80 81       	ld	r24, Z
 1f8:	88 23       	and	r24, r24
 1fa:	ec f7       	brge	.-6      	; 0x1f6 <i2c_read_data_ACK+0x10>
	if((TWSR & 0xF8) == 0x50)
 1fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 200:	88 7f       	andi	r24, 0xF8	; 248
 202:	80 35       	cpi	r24, 0x50	; 80
 204:	19 f4       	brne	.+6      	; 0x20c <i2c_read_data_ACK+0x26>
	{
		return TWDR;
 206:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 20a:	08 95       	ret
	}
	else
	{
		UART_1_puts("\r\n St3 ");
 20c:	8a e2       	ldi	r24, 0x2A	; 42
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	66 d1       	rcall	.+716    	; 0x4de <UART_1_puts>
		UART_1_putc(TWDR);
 212:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 216:	5b d1       	rcall	.+694    	; 0x4ce <UART_1_putc>
		return FALSE;
 218:	80 e0       	ldi	r24, 0x00	; 0
	}	
}
 21a:	08 95       	ret

0000021c <i2c_read_data_NACK>:

uint8_t i2c_read_data_NACK()
{
	
	TWCR&=~(1<<TWEA);
 21c:	ec eb       	ldi	r30, 0xBC	; 188
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	8f 7b       	andi	r24, 0xBF	; 191
 224:	80 83       	st	Z, r24
	TWCR|=(1<<TWINT)|(1<<TWEN);
 226:	80 81       	ld	r24, Z
 228:	84 68       	ori	r24, 0x84	; 132
 22a:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 22c:	80 81       	ld	r24, Z
 22e:	88 23       	and	r24, r24
 230:	ec f7       	brge	.-6      	; 0x22c <i2c_read_data_NACK+0x10>
	if((TWSR & 0xF8) == 0x58)
 232:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 236:	88 7f       	andi	r24, 0xF8	; 248
 238:	88 35       	cpi	r24, 0x58	; 88
 23a:	19 f4       	brne	.+6      	; 0x242 <i2c_read_data_NACK+0x26>
	{
		return TWDR;
 23c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 240:	08 95       	ret
	}
	else
	{
		UART_1_puts("\r\n St4 ");
 242:	82 e3       	ldi	r24, 0x32	; 50
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	4b d1       	rcall	.+662    	; 0x4de <UART_1_puts>
		UART_1_putc(TWDR);
 248:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 24c:	40 d1       	rcall	.+640    	; 0x4ce <UART_1_putc>
		return FALSE;
 24e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 250:	08 95       	ret

00000252 <rtc_write>:

void rtc_write(unsigned char reg, unsigned char data)
{
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	c8 2f       	mov	r28, r24
 258:	d6 2f       	mov	r29, r22
	if (i2c_start())
 25a:	43 df       	rcall	.-378    	; 0xe2 <i2c_start>
 25c:	88 23       	and	r24, r24
 25e:	d1 f0       	breq	.+52     	; 0x294 <rtc_write+0x42>
	{
		
		if (i2c_slave_add_write(0xD0))
 260:	80 ed       	ldi	r24, 0xD0	; 208
 262:	76 df       	rcall	.-276    	; 0x150 <i2c_slave_add_write>
 264:	88 23       	and	r24, r24
 266:	91 f0       	breq	.+36     	; 0x28c <rtc_write+0x3a>
		{
			if (i2c_data_byte_write(reg))
 268:	8c 2f       	mov	r24, r28
 26a:	8b df       	rcall	.-234    	; 0x182 <i2c_data_byte_write>
 26c:	88 23       	and	r24, r24
 26e:	51 f0       	breq	.+20     	; 0x284 <rtc_write+0x32>
			{
				if (i2c_data_byte_write(data))
 270:	8d 2f       	mov	r24, r29
 272:	87 df       	rcall	.-242    	; 0x182 <i2c_data_byte_write>
 274:	88 23       	and	r24, r24
 276:	11 f0       	breq	.+4      	; 0x27c <rtc_write+0x2a>
				{
		
					i2c_stop();				
 278:	62 df       	rcall	.-316    	; 0x13e <i2c_stop>
 27a:	0f c0       	rjmp	.+30     	; 0x29a <rtc_write+0x48>
				} 
				else
				{
					UART_1_puts("\r\n Data byte write Failed");
 27c:	8a e3       	ldi	r24, 0x3A	; 58
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	2e d1       	rcall	.+604    	; 0x4de <UART_1_puts>
 282:	0b c0       	rjmp	.+22     	; 0x29a <rtc_write+0x48>
				}

			} 
			else
			{
				UART_1_puts("\r\n Reg Add Filed");
 284:	84 e5       	ldi	r24, 0x54	; 84
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	2a d1       	rcall	.+596    	; 0x4de <UART_1_puts>
 28a:	07 c0       	rjmp	.+14     	; 0x29a <rtc_write+0x48>
			}
					
		} 
		else
		{
			UART_1_puts("\r\n SLA+W failed");
 28c:	85 e6       	ldi	r24, 0x65	; 101
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	26 d1       	rcall	.+588    	; 0x4de <UART_1_puts>
 292:	03 c0       	rjmp	.+6      	; 0x29a <rtc_write+0x48>
		}
	}
	else
	{
		UART_1_puts("\r\n Start Failed");
 294:	85 e7       	ldi	r24, 0x75	; 117
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	22 d1       	rcall	.+580    	; 0x4de <UART_1_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29a:	8f e1       	ldi	r24, 0x1F	; 31
 29c:	9e e4       	ldi	r25, 0x4E	; 78
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <rtc_write+0x4c>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <rtc_write+0x52>
 2a4:	00 00       	nop
	}
	
	_delay_ms(10);
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <hex_to_decimal>:
}

unsigned char hex_to_decimal(unsigned char hex)
{
	unsigned char value;
	switch(hex)
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	8a 30       	cpi	r24, 0x0A	; 10
 2b0:	91 05       	cpc	r25, r1
 2b2:	b0 f4       	brcc	.+44     	; 0x2e0 <hex_to_decimal+0x34>
 2b4:	fc 01       	movw	r30, r24
 2b6:	ea 5b       	subi	r30, 0xBA	; 186
 2b8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ba:	1f c1       	rjmp	.+574    	; 0x4fa <__tablejump2__>
		case 0:
				value = '0';
		break;
		
		case 1:
			value = '1';
 2bc:	81 e3       	ldi	r24, 0x31	; 49
 2be:	08 95       	ret
		break;
		
		case 2:
			value = '2';
 2c0:	82 e3       	ldi	r24, 0x32	; 50
		break;
 2c2:	08 95       	ret
		
		case 3:
			value = '3';
 2c4:	83 e3       	ldi	r24, 0x33	; 51
		break;
 2c6:	08 95       	ret
		
		case 4:
			value = '4';
 2c8:	84 e3       	ldi	r24, 0x34	; 52
		break;
 2ca:	08 95       	ret
		
		case 5:
			value = '5';
 2cc:	85 e3       	ldi	r24, 0x35	; 53
		break;
 2ce:	08 95       	ret
		
		case 6:
			value = '6';
 2d0:	86 e3       	ldi	r24, 0x36	; 54
		break;
 2d2:	08 95       	ret
		
		case 7:
			value = '7';
 2d4:	87 e3       	ldi	r24, 0x37	; 55
		break;
 2d6:	08 95       	ret
		
		case 8:
			value = '8';
 2d8:	88 e3       	ldi	r24, 0x38	; 56
		break;
 2da:	08 95       	ret
		
		case 9:
			value = '9';
 2dc:	89 e3       	ldi	r24, 0x39	; 57
		break;
 2de:	08 95       	ret
		
		default:
			value = ' ';
 2e0:	80 e2       	ldi	r24, 0x20	; 32
		break;
 2e2:	08 95       	ret
{
	unsigned char value;
	switch(hex)
	{
		case 0:
				value = '0';
 2e4:	80 e3       	ldi	r24, 0x30	; 48
		default:
			value = ' ';
		break;
	}
	return value;
}
 2e6:	08 95       	ret

000002e8 <rtc_read>:
	
	_delay_ms(10);
}

unsigned char rtc_read(char dev_addr,char dev_loc)
{
 2e8:	cf 93       	push	r28
	char ch1, ch2, ch3, ch4, ch5, ch6, ch7; 
	if (i2c_start())
 2ea:	fb de       	rcall	.-522    	; 0xe2 <i2c_start>
 2ec:	88 23       	and	r24, r24
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <rtc_read+0xa>
 2f0:	68 c0       	rjmp	.+208    	; 0x3c2 <rtc_read+0xda>
	{
		if (i2c_slave_add_write(0xD0))
 2f2:	80 ed       	ldi	r24, 0xD0	; 208
 2f4:	2d df       	rcall	.-422    	; 0x150 <i2c_slave_add_write>
 2f6:	88 23       	and	r24, r24
 2f8:	09 f4       	brne	.+2      	; 0x2fc <rtc_read+0x14>
 2fa:	63 c0       	rjmp	.+198    	; 0x3c2 <rtc_read+0xda>
		{
			if (i2c_data_byte_write(0x00))
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	41 df       	rcall	.-382    	; 0x182 <i2c_data_byte_write>
 300:	88 23       	and	r24, r24
 302:	09 f4       	brne	.+2      	; 0x306 <rtc_read+0x1e>
 304:	5e c0       	rjmp	.+188    	; 0x3c2 <rtc_read+0xda>
			{
				if (i2c_rep_start())
 306:	04 df       	rcall	.-504    	; 0x110 <i2c_rep_start>
 308:	88 23       	and	r24, r24
 30a:	09 f4       	brne	.+2      	; 0x30e <rtc_read+0x26>
 30c:	5a c0       	rjmp	.+180    	; 0x3c2 <rtc_read+0xda>
				{
					
					if (i2c_write_add_read(0xD1))
 30e:	81 ed       	ldi	r24, 0xD1	; 209
 310:	51 df       	rcall	.-350    	; 0x1b4 <i2c_write_add_read>
 312:	88 23       	and	r24, r24
 314:	09 f4       	brne	.+2      	; 0x318 <rtc_read+0x30>
 316:	52 c0       	rjmp	.+164    	; 0x3bc <rtc_read+0xd4>
					{
						ch1 = i2c_read_data_ACK();
 318:	66 df       	rcall	.-308    	; 0x1e6 <i2c_read_data_ACK>
 31a:	c8 2f       	mov	r28, r24
						UART_1_putc(hex_to_decimal((ch1 & 0xF0)>>4));
 31c:	82 95       	swap	r24
 31e:	8f 70       	andi	r24, 0x0F	; 15
 320:	c5 df       	rcall	.-118    	; 0x2ac <hex_to_decimal>
 322:	d5 d0       	rcall	.+426    	; 0x4ce <UART_1_putc>
						UART_1_putc(hex_to_decimal(ch1 & 0x0F));
 324:	8c 2f       	mov	r24, r28
 326:	8f 70       	andi	r24, 0x0F	; 15
 328:	c1 df       	rcall	.-126    	; 0x2ac <hex_to_decimal>
 32a:	d1 d0       	rcall	.+418    	; 0x4ce <UART_1_putc>
						UART_1_putc(':');
 32c:	8a e3       	ldi	r24, 0x3A	; 58
 32e:	cf d0       	rcall	.+414    	; 0x4ce <UART_1_putc>
						
						ch2 = i2c_read_data_ACK();
 330:	5a df       	rcall	.-332    	; 0x1e6 <i2c_read_data_ACK>
 332:	c8 2f       	mov	r28, r24
						UART_1_putc(hex_to_decimal((ch2 & 0xF0)>>4));
 334:	82 95       	swap	r24
 336:	8f 70       	andi	r24, 0x0F	; 15
 338:	b9 df       	rcall	.-142    	; 0x2ac <hex_to_decimal>
 33a:	c9 d0       	rcall	.+402    	; 0x4ce <UART_1_putc>
						UART_1_putc(hex_to_decimal(ch2 & 0x0F));
 33c:	8c 2f       	mov	r24, r28
 33e:	8f 70       	andi	r24, 0x0F	; 15
 340:	b5 df       	rcall	.-150    	; 0x2ac <hex_to_decimal>
 342:	c5 d0       	rcall	.+394    	; 0x4ce <UART_1_putc>
						UART_1_putc(':');
 344:	8a e3       	ldi	r24, 0x3A	; 58
 346:	c3 d0       	rcall	.+390    	; 0x4ce <UART_1_putc>
						
						ch3 = i2c_read_data_ACK();
 348:	4e df       	rcall	.-356    	; 0x1e6 <i2c_read_data_ACK>
 34a:	c8 2f       	mov	r28, r24
						UART_1_putc(hex_to_decimal((ch3 & 0x10)>>4));
 34c:	82 95       	swap	r24
 34e:	81 70       	andi	r24, 0x01	; 1
 350:	ad df       	rcall	.-166    	; 0x2ac <hex_to_decimal>
 352:	bd d0       	rcall	.+378    	; 0x4ce <UART_1_putc>
						UART_1_putc(hex_to_decimal(ch3 & 0x0F));
 354:	8c 2f       	mov	r24, r28
 356:	8f 70       	andi	r24, 0x0F	; 15
 358:	a9 df       	rcall	.-174    	; 0x2ac <hex_to_decimal>
 35a:	b9 d0       	rcall	.+370    	; 0x4ce <UART_1_putc>
						UART_1_putc('-');
 35c:	8d e2       	ldi	r24, 0x2D	; 45
 35e:	b7 d0       	rcall	.+366    	; 0x4ce <UART_1_putc>
						
						ch4 = i2c_read_data_ACK();
 360:	42 df       	rcall	.-380    	; 0x1e6 <i2c_read_data_ACK>
						UART_1_putc(hex_to_decimal(ch4 & 0x0F));
 362:	8f 70       	andi	r24, 0x0F	; 15
 364:	a3 df       	rcall	.-186    	; 0x2ac <hex_to_decimal>
 366:	b3 d0       	rcall	.+358    	; 0x4ce <UART_1_putc>
						UART_1_putc('-');
 368:	8d e2       	ldi	r24, 0x2D	; 45
 36a:	b1 d0       	rcall	.+354    	; 0x4ce <UART_1_putc>
						
						ch5 = i2c_read_data_ACK();
 36c:	3c df       	rcall	.-392    	; 0x1e6 <i2c_read_data_ACK>
 36e:	c8 2f       	mov	r28, r24
						UART_1_putc(hex_to_decimal((ch5 & 0xF0)>>4));
 370:	82 95       	swap	r24
 372:	8f 70       	andi	r24, 0x0F	; 15
 374:	9b df       	rcall	.-202    	; 0x2ac <hex_to_decimal>
 376:	ab d0       	rcall	.+342    	; 0x4ce <UART_1_putc>
						UART_1_putc(hex_to_decimal(ch5 & 0x0F));
 378:	8c 2f       	mov	r24, r28
 37a:	8f 70       	andi	r24, 0x0F	; 15
 37c:	97 df       	rcall	.-210    	; 0x2ac <hex_to_decimal>
 37e:	a7 d0       	rcall	.+334    	; 0x4ce <UART_1_putc>
						UART_1_putc('/');
 380:	8f e2       	ldi	r24, 0x2F	; 47
 382:	a5 d0       	rcall	.+330    	; 0x4ce <UART_1_putc>
						
						ch6 = i2c_read_data_ACK();
 384:	30 df       	rcall	.-416    	; 0x1e6 <i2c_read_data_ACK>
 386:	c8 2f       	mov	r28, r24
						UART_1_putc(hex_to_decimal((ch6 & 0xF0)>>4));
 388:	82 95       	swap	r24
 38a:	8f 70       	andi	r24, 0x0F	; 15
 38c:	8f df       	rcall	.-226    	; 0x2ac <hex_to_decimal>
 38e:	9f d0       	rcall	.+318    	; 0x4ce <UART_1_putc>
						UART_1_putc(hex_to_decimal(ch6 & 0x0F));
 390:	8c 2f       	mov	r24, r28
 392:	8f 70       	andi	r24, 0x0F	; 15
 394:	8b df       	rcall	.-234    	; 0x2ac <hex_to_decimal>
 396:	9b d0       	rcall	.+310    	; 0x4ce <UART_1_putc>
						UART_1_putc('/');
 398:	8f e2       	ldi	r24, 0x2F	; 47
 39a:	99 d0       	rcall	.+306    	; 0x4ce <UART_1_putc>
						
						ch7 = i2c_read_data_NACK();
 39c:	3f df       	rcall	.-386    	; 0x21c <i2c_read_data_NACK>
 39e:	c8 2f       	mov	r28, r24
						i2c_stop();
 3a0:	ce de       	rcall	.-612    	; 0x13e <i2c_stop>
						UART_1_putc(hex_to_decimal((ch7 & 0xF0)>>4));
 3a2:	8c 2f       	mov	r24, r28
 3a4:	82 95       	swap	r24
 3a6:	8f 70       	andi	r24, 0x0F	; 15
 3a8:	81 df       	rcall	.-254    	; 0x2ac <hex_to_decimal>
 3aa:	91 d0       	rcall	.+290    	; 0x4ce <UART_1_putc>
						UART_1_putc(hex_to_decimal(ch7 & 0x0F));
 3ac:	8c 2f       	mov	r24, r28
 3ae:	8f 70       	andi	r24, 0x0F	; 15
 3b0:	7d df       	rcall	.-262    	; 0x2ac <hex_to_decimal>
 3b2:	8d d0       	rcall	.+282    	; 0x4ce <UART_1_putc>
						
						UART_1_puts("\r\n");
 3b4:	85 e8       	ldi	r24, 0x85	; 133
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	92 d0       	rcall	.+292    	; 0x4de <UART_1_puts>
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <rtc_read+0xda>
					}
					else
					{
						UART_1_puts("\r\n SLA+R failed");
 3bc:	88 e8       	ldi	r24, 0x88	; 136
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	8e d0       	rcall	.+284    	; 0x4de <UART_1_puts>
				}
			} 
		}
	} 
	return 0;
}
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <display_time_date>:

void display_time_date()
{	
	char ch; 
	
	UART_1_puts("\r\n Time : ");
 3c8:	88 e9       	ldi	r24, 0x98	; 152
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	88 d0       	rcall	.+272    	; 0x4de <UART_1_puts>
	
	ch = rtc_read(0xD0, 0x02);
 3ce:	62 e0       	ldi	r22, 0x02	; 2
 3d0:	80 ed       	ldi	r24, 0xD0	; 208
 3d2:	8a cf       	rjmp	.-236    	; 0x2e8 <rtc_read>
 3d4:	08 95       	ret

000003d6 <main>:
 3d6:	2f ef       	ldi	r18, 0xFF	; 255
 3d8:	81 e1       	ldi	r24, 0x11	; 17
 3da:	9a e7       	ldi	r25, 0x7A	; 122
 3dc:	21 50       	subi	r18, 0x01	; 1
 3de:	80 40       	sbci	r24, 0x00	; 0
 3e0:	90 40       	sbci	r25, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <main+0x6>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <main+0x10>
 3e6:	00 00       	nop

int main(void)
{
	_delay_ms(5000);
	
	DDRD = 0x0A;
 3e8:	8a e0       	ldi	r24, 0x0A	; 10
 3ea:	8a b9       	out	0x0a, r24	; 10
	
	i2c_init();
 3ec:	6f de       	rcall	.-802    	; 0xcc <i2c_init>
	UART_1_init();
 3ee:	5f d0       	rcall	.+190    	; 0x4ae <UART_1_init>
	UART_1_puts("\r\n Starting...");
 3f0:	83 ea       	ldi	r24, 0xA3	; 163
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	74 d0       	rcall	.+232    	; 0x4de <UART_1_puts>
 3f6:	2f ef       	ldi	r18, 0xFF	; 255
 3f8:	81 e1       	ldi	r24, 0x11	; 17
 3fa:	9a e7       	ldi	r25, 0x7A	; 122
 3fc:	21 50       	subi	r18, 0x01	; 1
 3fe:	80 40       	sbci	r24, 0x00	; 0
 400:	90 40       	sbci	r25, 0x00	; 0
 402:	e1 f7       	brne	.-8      	; 0x3fc <main+0x26>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	00 00       	nop
	
	_delay_ms(5000);
	rtc_write(0x00,0x00);
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	22 df       	rcall	.-444    	; 0x252 <rtc_write>
 40e:	2f ef       	ldi	r18, 0xFF	; 255
 410:	89 e6       	ldi	r24, 0x69	; 105
 412:	98 e1       	ldi	r25, 0x18	; 24
 414:	21 50       	subi	r18, 0x01	; 1
 416:	80 40       	sbci	r24, 0x00	; 0
 418:	90 40       	sbci	r25, 0x00	; 0
 41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
	_delay_ms(1000);
	rtc_write(0x01,0x06);
 420:	66 e0       	ldi	r22, 0x06	; 6
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	16 df       	rcall	.-468    	; 0x252 <rtc_write>
 426:	2f ef       	ldi	r18, 0xFF	; 255
 428:	89 e6       	ldi	r24, 0x69	; 105
 42a:	98 e1       	ldi	r25, 0x18	; 24
 42c:	21 50       	subi	r18, 0x01	; 1
 42e:	80 40       	sbci	r24, 0x00	; 0
 430:	90 40       	sbci	r25, 0x00	; 0
 432:	e1 f7       	brne	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 436:	00 00       	nop
	_delay_ms(1000);
	rtc_write(0x02,0x03);
 438:	63 e0       	ldi	r22, 0x03	; 3
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	0a df       	rcall	.-492    	; 0x252 <rtc_write>
 43e:	2f ef       	ldi	r18, 0xFF	; 255
 440:	89 e6       	ldi	r24, 0x69	; 105
 442:	98 e1       	ldi	r25, 0x18	; 24
 444:	21 50       	subi	r18, 0x01	; 1
 446:	80 40       	sbci	r24, 0x00	; 0
 448:	90 40       	sbci	r25, 0x00	; 0
 44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44e:	00 00       	nop
	_delay_ms(1000);
	rtc_write(0x04,0x25);
 450:	65 e2       	ldi	r22, 0x25	; 37
 452:	84 e0       	ldi	r24, 0x04	; 4
 454:	fe de       	rcall	.-516    	; 0x252 <rtc_write>
 456:	2f ef       	ldi	r18, 0xFF	; 255
 458:	89 e6       	ldi	r24, 0x69	; 105
 45a:	98 e1       	ldi	r25, 0x18	; 24
 45c:	21 50       	subi	r18, 0x01	; 1
 45e:	80 40       	sbci	r24, 0x00	; 0
 460:	90 40       	sbci	r25, 0x00	; 0
 462:	e1 f7       	brne	.-8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 464:	00 c0       	rjmp	.+0      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 466:	00 00       	nop
	_delay_ms(1000);
	rtc_write(0x05,0x10);
 468:	60 e1       	ldi	r22, 0x10	; 16
 46a:	85 e0       	ldi	r24, 0x05	; 5
 46c:	f2 de       	rcall	.-540    	; 0x252 <rtc_write>
 46e:	2f ef       	ldi	r18, 0xFF	; 255
 470:	89 e6       	ldi	r24, 0x69	; 105
 472:	98 e1       	ldi	r25, 0x18	; 24
 474:	21 50       	subi	r18, 0x01	; 1
 476:	80 40       	sbci	r24, 0x00	; 0
 478:	90 40       	sbci	r25, 0x00	; 0
 47a:	e1 f7       	brne	.-8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47e:	00 00       	nop
	_delay_ms(1000);
	rtc_write(0x06,0x16);
 480:	66 e1       	ldi	r22, 0x16	; 22
 482:	86 e0       	ldi	r24, 0x06	; 6
 484:	e6 de       	rcall	.-564    	; 0x252 <rtc_write>
 486:	2f ef       	ldi	r18, 0xFF	; 255
 488:	81 e1       	ldi	r24, 0x11	; 17
 48a:	9a e7       	ldi	r25, 0x7A	; 122
 48c:	21 50       	subi	r18, 0x01	; 1
 48e:	80 40       	sbci	r24, 0x00	; 0
 490:	90 40       	sbci	r25, 0x00	; 0
 492:	e1 f7       	brne	.-8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 494:	00 c0       	rjmp	.+0      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 496:	00 00       	nop
	
	_delay_ms(5000);
    while (1) 
    {
		display_time_date();
 498:	97 df       	rcall	.-210    	; 0x3c8 <display_time_date>
 49a:	2f ef       	ldi	r18, 0xFF	; 255
 49c:	83 ed       	ldi	r24, 0xD3	; 211
 49e:	90 e3       	ldi	r25, 0x30	; 48
 4a0:	21 50       	subi	r18, 0x01	; 1
 4a2:	80 40       	sbci	r24, 0x00	; 0
 4a4:	90 40       	sbci	r25, 0x00	; 0
 4a6:	e1 f7       	brne	.-8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4aa:	00 00       	nop
 4ac:	f5 cf       	rjmp	.-22     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>

000004ae <UART_1_init>:
#include <util/delay.h>
#include "UART_1.h"

void UART_1_init()
{
	UBRR1H = (unsigned char) (((F_CPU/(BAUD*16UL))-1)>>8) ;
 4ae:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (unsigned char) (F_CPU/(BAUD*16UL))-1;
 4b2:	89 e1       	ldi	r24, 0x19	; 25
 4b4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1A=0x00;
 4b8:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	UCSR1B=0x00;
 4bc:	e9 ec       	ldi	r30, 0xC9	; 201
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	10 82       	st	Z, r1

	UCSR1C=0b10000110;
 4c2:	86 e8       	ldi	r24, 0x86	; 134
 4c4:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
	// Set frame format: asynchronous, 8data, no parity, 1 stop bit
	UCSR1B=0x18;
 4c8:	88 e1       	ldi	r24, 0x18	; 24
 4ca:	80 83       	st	Z, r24
 4cc:	08 95       	ret

000004ce <UART_1_putc>:
}
void UART_1_putc(unsigned char data)
{

	while ( !(UCSR1A & (1<<UDRE1)) );  /* Wait for empty transmit buffer */
 4ce:	e8 ec       	ldi	r30, 0xC8	; 200
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	90 81       	ld	r25, Z
 4d4:	95 ff       	sbrs	r25, 5
 4d6:	fd cf       	rjmp	.-6      	; 0x4d2 <UART_1_putc+0x4>

	UDR1 = data;         /* Start transmition */
 4d8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 4dc:	08 95       	ret

000004de <UART_1_puts>:

}
void UART_1_puts(char *str)
{
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	ec 01       	movw	r28, r24
	
	while( *str != '\0' ){
 4e4:	88 81       	ld	r24, Y
 4e6:	88 23       	and	r24, r24
 4e8:	29 f0       	breq	.+10     	; 0x4f4 <UART_1_puts+0x16>
 4ea:	21 96       	adiw	r28, 0x01	; 1
		
		UART_1_putc( *str++ );
 4ec:	f0 df       	rcall	.-32     	; 0x4ce <UART_1_putc>

}
void UART_1_puts(char *str)
{
	
	while( *str != '\0' ){
 4ee:	89 91       	ld	r24, Y+
 4f0:	81 11       	cpse	r24, r1
 4f2:	fc cf       	rjmp	.-8      	; 0x4ec <UART_1_puts+0xe>
		
		UART_1_putc( *str++ );
	}
}
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <__tablejump2__>:
 4fa:	ee 0f       	add	r30, r30
 4fc:	ff 1f       	adc	r31, r31
 4fe:	00 24       	eor	r0, r0
 500:	00 1c       	adc	r0, r0
 502:	0b be       	out	0x3b, r0	; 59
 504:	07 90       	elpm	r0, Z+
 506:	f6 91       	elpm	r31, Z
 508:	e0 2d       	mov	r30, r0
 50a:	09 94       	ijmp

0000050c <_exit>:
 50c:	f8 94       	cli

0000050e <__stop_program>:
 50e:	ff cf       	rjmp	.-2      	; 0x50e <__stop_program>
